import os
import sys
import time
import ast
import threading

# Force Qt to use XCB if Wayland plugin missing
os.environ['QT_QPA_PLATFORM'] = 'xcb'

import rclpy
import DR_init

from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QGridLayout, QPushButton
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor, QPalette

# Configuration
ROBOT_ID = "dsr01"
ROBOT_MODEL = "m0609"
VELOCITY, ACC = 60, 60
ON, OFF = 1, 0
# Force control thresholds
FIRST, SECOND = 30, 50

# Initialize DR_init identifiers (required before node creation)
DR_init.__dsr__id = ROBOT_ID
DR_init.__dsr__model = ROBOT_MODEL

class StatusGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Brick Assembly GUI")
        self.resize(400, 350)

        # 3x3 grid for block heights
        grid = QGridLayout()
        self.labels = []
        for i in range(9):
            lbl = QLabel(str(i+1))
            lbl.setAutoFillBackground(True)
            lbl.setFixedSize(40, 40)
            lbl.setAlignment(Qt.AlignCenter)
            pal = lbl.palette()
            pal.setColor(QPalette.Window, QColor('lightgray'))
            lbl.setPalette(pal)
            grid.addWidget(lbl, i//3, i%3)
            self.labels.append(lbl)

        self.status_label = QLabel("대기 중...")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.start_btn = QPushButton("시작")

        layout = QVBoxLayout()
        layout.addLayout(grid)
        layout.addWidget(self.status_label)
        layout.addWidget(self.start_btn)
        self.setLayout(layout)

    def update_block_status(self, build_list):
        color_map = {0: QColor('lightgray'), 1: QColor('yellow'), 2: QColor('orange'), 3: QColor('red')}
        for i, val in enumerate(build_list):
            pal = self.labels[i].palette()
            pal.setColor(QPalette.Window, color_map.get(val, QColor('white')))
            self.labels[i].setPalette(pal)

    def update_status_text(self, text):
        self.status_label.setText(text)

# Core process moved into a thread
def run_process(gui: StatusGUI):
    # ROS2 init
    rclpy.init()
    node = rclpy.create_node("brick_assemble_node", namespace=ROBOT_ID)
    DR_init.__dsr__node = node

    # Import DSR APIs
    try:
        from DSR_ROBOT2 import (
            get_digital_input, set_digital_output,
            get_current_posx, set_ref_coord,
            set_tool, set_tcp,
            movej, movel, set_stiffnessx, amove_periodic,
            mwait, movesx,
            task_compliance_ctrl, release_compliance_ctrl,
            set_desired_force, release_force, check_force_condition,
            DR_BASE, DR_MVS_VEL_CONST, DR_TOOL,
            DR_FC_MOD_REL, DR_AXIS_Z, DR_MV_MOD_REL
        )
        from DR_common2 import posx, posj
    except ImportError as e:
        gui.update_status_text(f"Import error: {e}")
        return

    # Load system variables
    with open('/home/rokey/ros_ws/building_text/build_list.txt','r',encoding='utf-8') as f:
        build_list = ast.literal_eval(f.read())
    with open('/home/rokey/ros_ws/building_text/blue_print_index.txt','r',encoding='utf-8') as f:
        i = int(f.read())
    with open('/home/rokey/ros_ws/building_text/construct_index.txt','r',encoding='utf-8') as f:
        construct_index = ast.literal_eval(f.read())

    gui.update_block_status(build_list)
    gui.update_status_text(f"도면 불러옴: {build_list}")

    # Define coordinates ( 그대로 반영 )
    blueprint_xy1 = posx(194.38, -60.5, 150.0, 152.35, 180, 143.21)
    blueprint_xy2 = posx(244.83, -53.04, 150.0, 166.55, 180, 157.29)
    blueprint_xy3 = posx(295.89, -45.59, 150.0, 161, -180, 151.96)
    blueprint_xy4 = posx(201.67, -111.3, 150.0, 144.15, 180, 135.19)
    blueprint_xy5 = posx(252.36, -103.68, 150.0, 141.41, -180, 132.02)
    blueprint_xy6 = posx(302.79, -95.66, 150.0, 165.55, 180, 155.94)
    blueprint_xy7 = posx(209.64, -161.45, 150.0, 139.01, 180, 129.42)
    blueprint_xy8 = posx(259.82, -154.17, 150.0, 153.75, 179.96, 144)
    blueprint_xy9 = posx(310.27, -146.5, 150.0, 20.05, -179.96, 10.52)
    position_lst = [blueprint_xy1, blueprint_xy2, blueprint_xy3,
                    blueprint_xy4, blueprint_xy5, blueprint_xy6,
                    blueprint_xy7, blueprint_xy8, blueprint_xy9]
    JReady = posj([0,0,90,0,90,0])
    cup_up = posx(457.41,268.36,225,104.04,179.98,103.65)
    cup_down = posx(456.61,267.75,65,16.53,-179.87,16.16)
    xlist = [
        posx(457.41,268.36,175,104.04,179.98,103.65), posx(456.61,267.81,175,16.53,-179.87,16.16),
        posx(395.87,144.91,175,90.38,-127.98,90), posx(395.87,-183.79,175,90.38,-127.98,90),
        posx(415.86,-224.88,175,90.38,-127.98,90), posx(448.35,-224.89,175,90.38,-127.98,90),
        posx(474.69,-178.35,175,90.38,-127.98,90), posx(474.68,136.46,175,90.38,-127.98,90),
        posx(516.84,162.17,175,90.39,-127.98,90), posx(557.77,124.13,175,90.39,-127.98,90),
        posx(557.78,-193.65,175,90.39,-127.98,90)
    ]
    dummy = posj([37.12, -0.03, 100.27, -0.02, 79.76, 129.49])
    pos_home = posj(0,0,90,0,90,0)
    height = 120
    block_short = posx(299.07,89.08,41+height,13.84,180,105.56)
    block_long = posx(299.51,14.82,41+height,9.72,180,101.8)
    step_lst = [step_1, step_2, step_3, step_4, step_5, step_6, step_7, step_8, step_9] = [
        posx(401.43,114.9,35+height,69,180,68.92), posx(480.75,114.37,35+height,3.87,180,4.17),
        posx(555.21,113.93,35+height,10.35,180,10.71), posx(400.75,2.88,35+height,178.8,180,179.27),
        posx(480.54,2.21,35+height,17.65,180,18.13), posx(555.57,1.85,35+height,169.21,180,169.69),
        posx(399.66,-108.28,35+height,160.73,180,161.28), posx(479.99,-108.84,35+height,167.52,180,167.91),
        posx(555.68,-109.54,35+height,146.96,180,147.18)
    ]
    block_to_down = posx(0,0,-height,0,0,0)
    block_for_spread = posx(0,0,40,0,0,0)
    offset_for_short = posx(0,-31.9,0,0,0,0)
    offset_for_long = posx(0,-47.7,0,0,0,0)

    # Helper functions
    def grip():
        set_digital_output(1, ON); set_digital_output(2, OFF); time.sleep(0.5)
    def release():
        set_digital_output(1, OFF); set_digital_output(2, ON); time.sleep(0.5)
    def check_bar(idx):
        task_compliance_ctrl()
        set_stiffnessx([3000,3000,3000,200,200,200], time=0)
        set_desired_force([0,0,-50,0,0,0],[0,0,1,0,0,0], time=0)
        while not check_force_condition(DR_AXIS_Z, max=25): pass
        x = get_current_posx()[0]
        if x[2]>=64: build_list[idx]=3
        elif x[2]>=54: build_list[idx]=2
        elif x[2]>=44: build_list[idx]=1
        else: build_list[idx]=0
        release_force(time=0); release_compliance_ctrl()
        gui.update_block_status(build_list)

    # Cement function
    def cement():
        gui.update_status_text('시멘트 작업 시작')
        print('시멘트 도구 장비')
        set_ref_coord(DR_BASE); movel(cup_up,vel=VELOCITY,acc=ACC); mwait(0.1)
        release(); mwait(0.1); movel(cup_down,vel=VELOCITY,acc=ACC); mwait(0.1)
        grip(); mwait(0.1); movel(cup_up,vel=VELOCITY,acc=ACC)
        movej(JReady,vel=VELOCITY,acc=ACC)
        amove_periodic(amp=example_amp,period=3,atime=0.02,repeat=2,ref=DR_TOOL)
        mwait(0.1); movesx(xlist,vel=[100,30],acc=[200,60],vel_opt=DR_MVS_VEL_CONST)
        mwait(0.1); movel(cup_up,vel=VELOCITY,acc=ACC); mwait(0.1)
        movel(cup_down,vel=VELOCITY,acc=ACC); mwait(0.1); release(); mwait(0.1)
        movel(cup_up,vel=VELOCITY,acc=ACC); mwait(0.1)
        gui.update_status_text('시멘트 작업 완료')

    # Main assembly sequence
    set_tool("Tool Weight_2FG"); set_tcp("2FG_TCP")
    movej(pos_home,vel=80,acc=80); release(); mwait(0.1); grip(); mwait(0.2)
    gui.update_status_text('초기 위치 설정 완료')

    gui.update_status_text('측정 시작'); print('측정 시작')
    if i<9:
        for idx in range(i, len(position_lst)):
            gui.update_status_text(f'{idx}위치 측정 시작')
            movel(position_lst[idx],vel=150,acc=300,ref=DR_BASE); check_bar(idx)
            movel(position_lst[idx],vel=150,acc=300,ref=DR_BASE)
            with open('/home/rokey/ros_ws/building_text/blue_print_index.txt','w',encoding='utf-8') as f: f.write(str(idx+1))
            with open('/home/rokey/ros_ws/building_text/build_list.txt','w',encoding='utf-8') as f: f.write(str(build_list))
            gui.update_status_text(f'{idx}위치 측정 완료')
        gui.update_status_text('측정 완료'); print('측정 완료')
    else:
        gui.update_status_text('이미 측정 완료')

    time.sleep(1)
    if construct_index<=0:
        gui.update_status_text('시멘트 시작'); cement(); time.sleep(1)
    gui.update_status_text('건설 시작'); print('건설 시작')

    if construct_index<9:
        for idx in range(construct_index, len(build_list)):
            movej(pos_home,vel=30,acc=30); release(); mwait(0.5)
            if build_list[idx]==0:
                gui.update_status_text(f'{idx}단계 건설 없음')
                with open('/home/rokey/ros_ws/building_text/construct_index.txt','w',encoding='utf-8') as f: f.write(str(idx))
                continue
            # handle build_list[idx] in {1,2} and 3 with gui.update_status_text(...) inside loops (analogous to prints)
            # ... (remaining construction logic identical to original, but insert gui.update_status_text at key points)
    gui.update_status_text('건설 완료')
    rclpy.shutdown()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    gui = StatusGUI(); gui.show()
    thread = threading.Thread(target=run_process, args=(gui,))
    gui.start_btn.clicked.connect(thread.start)
    sys.exit(app.exec_())
